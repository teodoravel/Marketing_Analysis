library(readr)
library(dplyr)
library(ggplot2)
library(data.table)
#POCETOK TOCKA A - prezemanje podatocno mnozestvo
data <- read_csv("C:/Users/Mike/Desktop/sales_dataset.csv")
# Podatoci od kolonata so koi ke rabotime
marketing_budgets <- data$marketing_budget_thousands
# Presmetki za intervalite
n <- length(marketing_budgets)
k <- round(sqrt(n))
range <- max(marketing_budgets) - min(marketing_budgets)
interval_width <- range/k
budget_range <- diff(range(marketing_budgets))
num_intervals <- ceiling(sqrt(length(marketing_budgets)))
interval_width <- budget_range / num_intervals
upper_limit <- max(marketing_budgets) + interval_width
# Intervalni granici i sredni tocki
intervals <- seq(min(marketing_budgets), upper_limit, by = interval_width)
midpoints <- (intervals[-1] + intervals[-length(intervals)]) / 2
#Cestoti
hist_data <- hist(marketing_budgets, breaks = intervals, right = FALSE, plot = FALSE)
cumulative_frequencies <- cumsum(hist_data$counts)
relative_cumulative_frequencies <- cumulative_frequencies / sum(hist_data$counts)
relative_frequencies <- hist_data$counts / sum(hist_data$counts)
relative_frequencies_percent <- relative_frequencies * 100
relative_cumulative_frequencies_percent <- relative_cumulative_frequencies * 100
# Prikazuvanje intervalni granici vo [a, b) format
formatted_intervals <- sprintf("[%0.2f, %0.2f)", round(hist_data$breaks[-length(hist_data$breaks)], 2), round(hist_data$breaks[-1], 2))
midpoints <- round(midpoints, 2)
cumulative_frequencies <- round(cumulative_frequencies, 2)
relative_frequencies <- round(relative_frequencies,2)
relative_cumulative_frequencies <- round(relative_cumulative_frequencies, 2)
relative_frequencies_percent <- round(relative_frequencies_percent, 2)
relative_cumulative_frequencies_percent <- round(relative_cumulative_frequencies_percent, 2)
# Kreiranje finalna tabela
final_table <- data.frame(
Intervals = formatted_intervals,
Midpoints = midpoints,
Frequencies = hist_data$counts,
Relative_Frequencies = relative_frequencies,
Cumulative_Frequencies = cumulative_frequencies,
Relative_Cumulative_Frequencies = relative_cumulative_frequencies,
Relative_Frequencies_Percent = relative_frequencies_percent,
Relative_Cumulative_Frequencies_Percent = relative_cumulative_frequencies_percent
)
# Vkupno (presmetki)
total_frequencies = round(sum(final_table$Frequencies), 0)
total_relative_frequencies = round(sum(final_table$Relative_Frequencies), 0)
total_relative_frequencies_percent = round(sum(final_table$Relative_Frequencies_Percent), 0)
# Spojuvanje na Vkupno redot so tabelata
total_row <- data.frame(
Intervals = "Вкупно:",
Midpoints = NA,
Frequencies = total_frequencies,
Relative_Frequencies = total_relative_frequencies,
Cumulative_Frequencies = NA,
Relative_Cumulative_Frequencies = NA,
Relative_Frequencies_Percent = total_relative_frequencies_percent,
Relative_Cumulative_Frequencies_Percent = NA
)
final_table <- bind_rows(final_table, total_row)
View(final_table)
hist_data <- hist(marketing_budgets, breaks = intervals, right = FALSE, plot = FALSE)
# Histogram so ggplot2
histogram <- ggplot(data.frame(x = hist_data$mids, y = hist_data$counts), aes(x = x, y = y)) +
geom_bar(stat = "identity", fill = "lightblue", color = "black") +
labs(title = "Histogram: Marketing Budgets", x = "Marketing Budgets (thousands)", y = "Frequencies")
print(final_table)
print(histogram)
# Presmetki za poligon
polygon_data <- data.frame(
x = c(hist_data$breaks[1] - interval_width, hist_data$mids, hist_data$breaks[length(hist_data$breaks)] + interval_width),
y = c(0, hist_data$counts, 0)
)
# Plogion so ggplot2
polygon_plot <- ggplot(polygon_data, aes(x = x, y = y)) +
geom_line(color = "red", size = 1.5) +
labs(title = "Frequency polygon: Marketing Budgets",
x = "Marketing Budgets (thousands)", y = "Frequencies")
print(polygon_plot)
# Steblo list dijagram
marketing_budgets_ordered <- sort(marketing_budgets)
stem_sample1 <- marketing_budgets_ordered[1:15]
stem_sample1 <- round(stem_sample1, 2)
myStem <- function(x, leftDigits, rounding = 0) {
data = data.table("x" = x)
data[, left := floor(x/10^leftDigits)]
data[, right := (round(x - left*10^leftDigits, rounding))*10^rounding]
data = data[, paste(sort(right), collapse = " "), by = left]
data[, out := paste(left, " | ", V1), by = left]
cat(data$out, sep = "\n")
}
myStem(stem_sample1, 0, 2)
# Presmetaj Moda, Medijana, Prosek
mode_value <- as.numeric(names(sort(table(marketing_budgets), decreasing = TRUE)[1]))
median_value <- median(marketing_budgets)
mean_value <- mean(marketing_budgets)
cat("Мода:", mode_value, "\n")
cat("Медијана:", median_value, "\n")
cat("Просек:", mean_value, "\n")
# Presmetaj disperzija i standardna devijacija
dispersion_value <- var(marketing_budgets)
std_deviation_value <- sd(marketing_budgets)
cat("Дисперзија:", dispersion_value, "\n")
cat("Стандардна девијација:", std_deviation_value, "\n")
#Kvartili i IQR
q1 <- quantile(marketing_budgets, probs = 0.25)
q2 <- median(marketing_budgets)  # Median is also Q2
q3 <- quantile(marketing_budgets, probs = 0.75)
iqr <- q3-q1
cat("Q1:", q1, "\n")
cat("Q2 (Медијана):", q2, "\n")
cat("Q3:", q3, "\n")
cat("IQR:", iqr, "\n")
#NADOLE E ZA VTOROTO OBELEZJE
#2 Izdvojuvanje kolona
actual_sales <- data$actual_sales_millions
#2 Presmetki za intervali
n2 <- length(actual_sales)
k2 <- round(sqrt(n2))
range2 <- max(actual_sales) - min(actual_sales)
interval_width2 <- range2 / k2
budget_range2 <- diff(range(actual_sales))
num_intervals2 <- ceiling(sqrt(length(actual_sales)))
interval_width2 <- budget_range2 / num_intervals2
upper_limit2 <- max(actual_sales) + interval_width2
#2 Intervalni granici i sredni tocki
intervals2 <- seq(min(actual_sales), upper_limit2, by = interval_width2)
midpoints2 <- (intervals2[-1] + intervals2[-length(intervals2)]) / 2
#2Cestoti
hist_data2 <- hist(actual_sales, breaks = intervals2, right = FALSE, plot = FALSE)
cumulative_frequencies2 <- cumsum(hist_data2$counts)
relative_cumulative_frequencies2 <- cumulative_frequencies2 / sum(hist_data2$counts)
relative_frequencies2 <- hist_data2$counts / sum(hist_data2$counts)
relative_frequencies_percent2 <- relative_frequencies2 * 100
relative_cumulative_frequencies_percent2 <- relative_cumulative_frequencies2 * 100
#2 Prikazuvanje intervalni granici vo [a, b) format
formatted_intervals2 <- sprintf("[%0.2f, %0.2f)", round(hist_data2$breaks[-length(hist_data2$breaks)], 2), round(hist_data2$breaks[-1], 2))
midpoints2 <- round(midpoints2, 2)
cumulative_frequencies2 <- round(cumulative_frequencies2, 2)
relative_frequencies2 <- round(relative_frequencies2, 2)
relative_cumulative_frequencies2 <- round(relative_cumulative_frequencies2, 2)
relative_frequencies_percent2 <- round(relative_frequencies_percent2, 2)
relative_cumulative_frequencies_percent2 <- round(relative_cumulative_frequencies_percent2, 2)
#2 Kreiranje finalna tabela
final_table2 <- data.frame(
Intervals = formatted_intervals2,
Midpoints = midpoints2,
Frequencies = hist_data2$counts,
Relative_Frequencies = relative_frequencies2,
Cumulative_Frequencies = cumulative_frequencies2,
Relative_Cumulative_Frequencies = relative_cumulative_frequencies2,
Relative_Frequencies_Percent = relative_frequencies_percent2,
Relative_Cumulative_Frequencies_Percent = relative_cumulative_frequencies_percent2
)
#2 Vkupni presmetki
total_frequencies2 = round(sum(final_table2$Frequencies), 0)
total_relative_frequencies2 = round(sum(final_table2$Relative_Frequencies), 0)
total_relative_frequencies_percent2 = round(sum(final_table2$Relative_Frequencies_Percent), 0)
#2 Dodavanje na Vkupno redot vo tabelata
total_row2 <- data.frame(
Intervals = "Вкупно:",
Midpoints = NA,
Frequencies = total_frequencies2,
Relative_Frequencies = total_relative_frequencies2,
Cumulative_Frequencies = NA,
Relative_Cumulative_Frequencies = NA,
Relative_Frequencies_Percent = total_relative_frequencies_percent2,
Relative_Cumulative_Frequencies_Percent = NA
)
final_table2 <- bind_rows(final_table2, total_row2)
View(final_table2)
hist_data2 <- hist(actual_sales, breaks = intervals2, right = FALSE, plot = FALSE)
#2 Histogram so ggplot2
histogram2 <- ggplot(data.frame(x = hist_data2$mids, y = hist_data2$counts), aes(x = x, y = y)) +
geom_bar(stat = "identity", fill = "orange", color = "black") +
labs(title = "Histogram: Sales", x = "Sales (millions)", y = "Frequencies")
print(final_table2)
print(histogram2)
#2 Poligon data points presmetki
polygon_data2 <- data.frame(
x = c(hist_data2$breaks[1] - interval_width2, hist_data2$mids, hist_data2$breaks[length(hist_data2$breaks)] + interval_width2),
y = c(0, hist_data2$counts, 0)
)
#2 Poligon na cestoti so ggplot2
polygon_plot2 <- ggplot(polygon_data2, aes(x = x, y = y)) +
geom_line(color = "purple", size = 1.5) +
labs(title = "Frequency polygon: Sales",
x = "Sales (millions)", y = "Frequencies")
print(polygon_plot2)
#2 Steblo list dijagram
actual_sales_ordered <- sort(actual_sales)
stem_sample2 <- actual_sales_ordered[1:100]
stem_sample2 <- round(stem_sample2, 2)
myStem <- function(x, leftDigits, rounding = 0) {
data = data.table("x" = x)
data[, left := floor(x/10^leftDigits)]
data[, right := (round(x - left*10^leftDigits, rounding))*10^rounding]
data = data[, paste(sort(right), collapse = " "), by = left]
data[, out := paste(left, " | ", V1), by = left]
cat(data$out, sep = "\n")
}
myStem(stem_sample2, 0, 2)
#2 Presmetaj Moda, Medijana, Prosek
mode_value <- as.numeric(names(sort(table(actual_sales), decreasing = TRUE)[1]))
median_value <- median(actual_sales)
mean_value <- mean(actual_sales)
cat("Мода:", mode_value, "\n")
cat("Медијана:", median_value, "\n")
cat("Просек:", mean_value, "\n")
#2 Presmetaj disperzija i standardna devijacija
dispersion_value2 <- var(actual_sales)
std_deviation_value2 <- sd(actual_sales)
cat("Дисперзија:", dispersion_value2, "\n")
cat("Стандардна девијација:", std_deviation_value2, "\n")
#2 Kvartili i IQR
q1_2 <- quantile(actual_sales, 0.25)
q2_2 <- median(actual_sales)
q3_2 <- quantile(actual_sales, 0.75)
iqr_2 <- q3_2 - q1_2
cat("Q1:", q1_2, "\n")
cat("Q2 (Медијана):", q2_2, "\n")
cat("Q3:", q3_2, "\n")
cat("IQR:", iqr_2, "\n")
#Grafik na rasejuvanje so ggplot2
scatter_plot <- ggplot(data, aes(x = marketing_budgets, y = actual_sales)) +
geom_point() +
labs(title = "Marketing Budgets vs. Actual Sales",
x = "Marketing Budgets (thousands)",
y = "Sales (millions)")
print(scatter_plot)
#Koeficient na korelacija
correlation_coefficient <- cor(marketing_budgets, actual_sales)
#print(correlation_coefficient)
cat("Коефициентот на корелација е:", correlation_coefficient, "\n")
#NADOLE E ZA TOCKA B!!!!!!!!!!!! SE RABOTI ZA OBELEZJETO ACTUAL SALES
# Interval na doverba
critical_value <- qnorm(0.975)  # 0.975 e vsusnost (1 - alpha/2) za 95% nivo na doverba
standard_error <- std_deviation_value2 / sqrt(n2)
margin_of_error <- critical_value * standard_error
mathematical_expectation <- mean(actual_sales)
cat("Стандардната грешка е: ",standard_error,"\n")
cat("Маргината на грешка е:",margin_of_error,"\n")
cat("Математичкото очекување е: ",mathematical_expectation,"\n")
confidence_interval_lower <- mathematical_expectation - margin_of_error
confidence_interval_upper <- mathematical_expectation + margin_of_error
cat("Интервалот на доверба е: (", confidence_interval_lower, ", ", confidence_interval_upper, ")\n")
# Постават и тестираат соодветни хипотези за тестираниот параметар
# Slucaen izbor na 30 vrednosti i prosek na primerokot
set.seed(123)  #ovozmozuva sekogas istite slucajni vrednosti da bidat selektirani pri run na kodot
sample_data <- sample(actual_sales, 30)
sample_mean <- mean(sample_data)
cat("Просек на случајниот примерок: ", sample_mean, "\n")
# z-test statistika
z = ((sample_mean - mathematical_expectation) / (std_deviation_value2) * sqrt(30))
cat("Z-test statistika:", z, "\n")
#NADOLE E ZA TOCKA B!!!!!!!!!!!! SE RABOTI ZA OBELEZJETO ACTUAL SALES
# Interval na doverba
critical_value <- qnorm(0.975)  # 0.975 e vsusnost (1 - alpha/2) za 95% nivo na doverba
standard_error <- std_deviation_value2 / sqrt(n2)
margin_of_error <- critical_value * standard_error
mathematical_expectation <- mean(actual_sales)
cat("Стандардната грешка е: ",standard_error,"\n")
cat("Маргината на грешка е:",margin_of_error,"\n")
cat("Математичкото очекување е: ",mathematical_expectation,"\n")
confidence_interval_lower <- mathematical_expectation - margin_of_error
confidence_interval_upper <- mathematical_expectation + margin_of_error
cat("Интервалот на доверба е: (", confidence_interval_lower, ", ", confidence_interval_upper, ")\n")
# Постават и тестираат соодветни хипотези за тестираниот параметар
# Slucaen izbor na 30 vrednosti i prosek na primerokot
set.seed(123)  #ovozmozuva sekogas istite slucajni vrednosti da bidat selektirani pri run na kodot
sample_data <- sample(actual_sales, 30)
sample_mean <- mean(sample_data)
cat("Просек на случајниот примерок: ", sample_mean, "\n")
# z-test statistika
z = ((sample_mean - mathematical_expectation) / (std_deviation_value2) * sqrt(30))
cat("Z-test statistika:", z, "\n")
alpha <- 0.95
cr_domen <- qnorm((1-alpha)/2)
print( c(cr_domen, -1*cr_domen) )
print ( c(z))
if (z <= cr_domen && z >= -cr_domen) {
print("H0 се отфрла.")
} else {
print("H0 не се отфрла.")
}
# Kriticen domen STARO, NE VAZI
#lower_critical_value <- qnorm(0.025)  # za alpha/2 = 0.025
#upper_critical_value <- qnorm(0.975)  # za 1 - alpha/2 = 0.975
#cat("Критичниот домен е: (", lower_critical_value, ", ", upper_critical_value, ")\n")
#if (z >= lower_critical_value && z <= upper_critical_value) {
# cat("z не припаѓа на критичниот домен.\n")
# cat("Не се отфрла H0.\n")
#} else {
#cat("z припаѓа на критичниот домен.\n")
#cat("Се отфрла H0.\n")
#}
#Drug pristap: (se koristi centralna granicna teorema isto) (NE rabotam vaka momentalno)
# Ke generiram primerok od 30 i za site ke najdam z value. Za site 30 pravam q norm.
#Treba da dobijam st dev = sigma/koren 30, Prosek 0
#Dali e p < 0.05 ?
#hipotezata e deka z ima sredna vrednost 0 I st devijacija sigma/koren30
# TEST ZA RAMNOMERNA RASPREDELBA
#H0: Obelezjeto ima ramnomerna raspredelba
interval_width_raspredelba <- range2 / 8
intervals_raspredelba <- seq(min(actual_sales), max(actual_sales), by = interval_width_raspredelba)
#hist_data3 <- hist(actual_sales, breaks3 = intervals_raspredelba , right = FALSE, plot = FALSE)
#intervali_raspredelba <- sprintf("[%0.2f, %0.2f)", round(hist_data3$breaks3[-length(hist_data3$breaks3)], 2), round(hist_data3$breaks3[-1], 2))
#intervali_raspredelba <- cut(actual_sales, breaks = intervals_raspredelba, labels = FALSE, include.lowest = TRUE)
interval_labels <- c(
"Interval 1: [8.01, 10.26)",
"Interval 2: [10.26, 12.50)",
"Interval 3: [12.50, 14.75)",
"Interval 4: [14.75, 16.99)",
"Interval 5: [16.99, 19.24)",
"Interval 6: [19.24, 21.49)",
"Interval 7: [21.49, 23.73)",
"Interval 8: [23.73, 25.98)"
)
intervali_raspredelba <- cut(actual_sales, breaks = intervals_raspredelba, labels = interval_labels, include.lowest = TRUE)
print(intervali_raspredelba)
frequencies_raspredelba <- table(intervali_raspredelba)
# o e broj na podatoci vo sekoj od intervalite t.e. nabljuduvanite cestoti
o <- as.vector(frequencies_raspredelba)
print(o)
pt <- rep(1/8, 8) #pt e ocekuvana verojatnost na sekoj interval
chisq.test(o, p = pt)
test_result3 <- chisq.test(o, p = pt)
print(test_result3)
# Proverka dali p > 0.05
if (test_result3$p.value > 0.05) {
cat("Не се отфрла нултата хипотеза. Обележјето има рамномерна распределба.\n")
} else {
cat("Се отрла нултата хипотеза. Обележјето нема рамномерна распределба.\n")
}
# Test za nezavisnost : ne moze za numericki podatoci
# Regresiona analiza
# Grafik so ggplot2
scatter_plot <- ggplot(data, aes(x = marketing_budgets, y = actual_sales)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "red") + #dodavanje na pravata
labs(
title = "Linear regression",
x = "Marketing Budgets",
y = "Sales"
)
print(scatter_plot)
cat("Коефициент на детерминантност:", r_squared, "\n")
